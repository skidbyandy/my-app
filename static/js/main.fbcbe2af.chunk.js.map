{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","state","imguploaded","picurl","undefined","loadPic","bind","a","jsonUploads","document","getElementById","files","shardUploads","concatArray","Array","from","concat","console","log","tf","browserFiles","model","this","setState","URL","createObjectURL","output","fromPixels","className","src","id","type","title","webkitdirectory","directory","onClick","loadModel","getTensor","href","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"wZAAe,I,uBCMTA,E,kDACJ,aAAc,IAAD,8BACX,gBACKC,MAAM,CACTC,aAAa,EACbC,YAAQC,GAEV,EAAKC,QAAQ,EAAKA,QAAQC,KAAb,gBANF,E,oFASb,kCAAAC,EAAA,6DACMC,EAAeC,SAASC,eAAe,eAAeC,MACtDC,EAAeH,SAASC,eAAe,gBAAgBC,MACvDE,EAAcC,MAAMC,KAAKP,GAAaQ,OAAOF,MAAMC,KAAKH,IAC5DK,QAAQC,IAAIL,GAJd,SAKsBM,IAAmBA,IAAMC,aAAaP,IAL5D,OAKQQ,EALR,OAMEJ,QAAQC,IAAIG,GANd,2C,kHAQA,sBAAAd,EAAA,sDACEU,QAAQC,IAAI,WACZI,KAAKC,SAAS,CACZpB,OAAQqB,IAAIC,gBAAgBhB,SAASC,eAAe,cAAcC,MAAM,MAE1EM,QAAQC,IAAII,KAAKrB,OACjBqB,KAAKC,SAAS,CAACrB,aAAa,IAN9B,gD,oHAQA,4BAAAK,EAAA,sDACQmB,EAASP,IAAWQ,WAAWlB,SAASC,eAAe,QAC7DO,QAAQC,IAAIQ,GAFd,2C,0EAKA,WACE,OACE,qBAAKE,UAAU,UAAf,SACE,gCAEEN,KAAKrB,MAAMC,YACX,qBAAK2B,IAAKP,KAAKrB,MAAME,OAAQ2B,GAAG,QAChC,KAEA,uBAAOC,KAAK,OAAOD,GAAG,cAAcE,MAAM,YAAYC,gBAAgB,GAAGC,UAAU,KACnF,uBAAOH,KAAK,OAAOD,GAAG,eAAeE,MAAM,YAAYC,gBAAgB,GAAGC,UAAU,KACpF,uBAAOH,KAAK,OAAOD,GAAG,aAAaE,MAAM,cACzC,wBAAQG,QAASb,KAAKc,UAAtB,uBACA,wBAAQD,QAASb,KAAKjB,QAAtB,qBACA,wBAAQ8B,QAASb,KAAKe,UAAtB,uBACA,gCACE,sBAAKT,UAAU,OAAf,oBAA6B,gDAC7B,mBAAGU,KAAK,GAAGV,UAAU,WAArB,kBACA,mBAAGU,KAAK,GAAGV,UAAU,WAArB,mBACA,mBAAGU,KAAK,GAAGV,UAAU,kBAArB,uBACA,mBAAGU,KAAK,GAAGV,UAAU,WAArB,iC,GAnDMW,aA2DHvC,ICrDAwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1C,SAASC,eAAe,SAM1B8B,M","file":"static/js/main.fbcbe2af.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {Component} from \"react\"\nimport logo from './logo.svg';\nimport {Image} from \"canvas\"\n//import './App.css';\nimport * as tf from '@tensorflow/tfjs';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state={\n      imguploaded: false,\n      picurl: undefined\n    }\n    this.loadPic=this.loadPic.bind(this)\n  }\n\n  async loadModel(){\n    let jsonUploads  = document.getElementById(\"jsonuploads\").files\n    let shardUploads = document.getElementById(\"sharduploads\").files\n    let concatArray = Array.from(jsonUploads).concat(Array.from(shardUploads));\n    console.log(concatArray)\n    const model = await tf.loadLayersModel(tf.io.browserFiles(concatArray));\n    console.log(model)\n  }\n  async loadPic(){\n    console.log(\"loading\")\n    this.setState({\n      picurl: URL.createObjectURL(document.getElementById(\"picuploads\").files[0])\n    })\n    console.log(this.state)\n    this.setState({imguploaded: true})\n  }\n  async getTensor(){\n    const output = tf.browser.fromPixels(document.getElementById(\"pic\"));\n    console.log(output)\n  }\n\n  render(){\n    return (\n      <div className=\"sidebar\">\n        <div>\n        {\n          this.state.imguploaded ?\n          <img src={this.state.picurl} id=\"pic\"></img> :\n          null\n        }\n          <input type=\"file\" id=\"jsonuploads\" title=\"your text\" webkitdirectory=\"\" directory=\"\" />\n          <input type=\"file\" id=\"sharduploads\" title=\"your text\" webkitdirectory=\"\" directory=\"\" />\n          <input type=\"file\" id=\"picuploads\" title=\"your text\" />\n          <button onClick={this.loadModel}>loadModel</button>\n          <button onClick={this.loadPic}>loadPic</button>\n          <button onClick={this.getTensor}>getTensor</button>\n          <nav>\n            <div className=\"logo\">Awesome<span>Portfolio</span></div>\n            <a href=\"\" className=\"nav-item\">Home</a>\n            <a href=\"\" className=\"nav-item\">About</a>\n            <a href=\"\" className=\"nav-item active\">Portfolio</a>\n            <a href=\"\" className=\"nav-item\">Contact</a>\n          </nav>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}