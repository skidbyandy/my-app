{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","state","imguploaded","picurl","undefined","tensor","model","predictarray","test","test2","test3","loadPic","bind","getTensor","loadModel","predict","a","jsonUploads","document","getElementById","files","shardUploads","concatArray","Array","from","concat","console","log","tf","browserFiles","this","setState","summary","URL","createObjectURL","output","fromPixels","resizeBilinear","rgb","mul","expandDims","array","outputArray","act_map","inputs","input","outputs","getLayer","error","className","src","id","type","title","webkitdirectory","directory","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.feb734a3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {Component} from \"react\"\nimport logo from './logo.svg';\nimport {Image} from \"canvas\"\n//import './App.css';\nimport * as tf from '@tensorflow/tfjs';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state={\n      imguploaded: false,\n      picurl: undefined,\n      tensor: undefined,\n      model: undefined,\n      predictarray: undefined,\n      test: undefined,\n      test2: undefined,\n      test3: undefined\n    }\n    this.loadPic=this.loadPic.bind(this)\n    this.getTensor=this.getTensor.bind(this)\n    this.loadModel=this.loadModel.bind(this)\n    this.predict=this.predict.bind(this)\n    this.test= this.test.bind(this)\n  }\n\n  async loadModel(){\n    let jsonUploads  = document.getElementById(\"jsonuploads\").files\n    let shardUploads = document.getElementById(\"sharduploads\").files\n    let concatArray = Array.from(jsonUploads).concat(Array.from(shardUploads));\n    console.log(concatArray)\n    const model = await tf.loadLayersModel(tf.io.browserFiles(concatArray));\n    this.setState({model: model})\n    console.log(model.summary())\n  }\n  loadPic(){\n    console.log(\"loading\")\n    this.setState({\n      picurl: URL.createObjectURL(document.getElementById(\"picuploads\").files[0])\n    })\n    console.log(this.state)\n    this.setState({imguploaded: true})\n  }\n\n  async getTensor(){\n    let output = tf.browser.fromPixels(document.getElementById(\"pic\")).resizeBilinear([64,64]);\n    const rgb = tf.tensor1d([0.2989, 0.587, 0.114])\n    output= tf.sum(output.mul(rgb), 2).expandDims(-1).expandDims(0)\n    this.setState({tensor: output})\n    let outputArray=await output.array()\n    console.log(outputArray[0])\n  }\n\n  async predict(){\n    let model=this.state.model\n    let predict=model.predict(this.state.tensor)\n    let predictarray=await predict.array()\n    this.setState({predictarray: predictarray})\n    console.log(predictarray)\n  }\n\n  async scorecam(){\n    let model=this.state.model\n    //let act_map_array = tf.model(inputs: model.input, outputs: model.getLayer(\"add_5\").output)\n  }\n\n  test()\n  {\n    let model=this.state.model\n    try{\n      let act_map= tf.model({inputs: model.input, outputs: model.getLayer(\"add_5\").output}).predict(this.state.tensor)\n      this.setState({test: act_map})\n    }catch(error){\n      console.log(error)\n    }\n    try{\n      this.setState({test2: model.input})\n    }catch(error){\n      console.log(error)\n    }\n    try{\n      this.setState({test3: model.getLayer(\"add_5\")})\n    }catch(error){\n      console.log(error)\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"dev\">\n        <div>\n        {\n          this.state.imguploaded ?\n          <img src={this.state.picurl} id=\"pic\"></img> :\n          null\n        }\n          <input type=\"file\" id=\"jsonuploads\" title=\"your text\" webkitdirectory=\"\" directory=\"\" />\n          <input type=\"file\" id=\"sharduploads\" title=\"your text\" webkitdirectory=\"\" directory=\"\" />\n          <input type=\"file\" id=\"picuploads\" title=\"your text\" />\n          <button onClick={this.loadModel}>loadModel</button>\n          <button onClick={this.loadPic}>loadPic</button>\n          <button onClick={this.getTensor}>getTensor</button>\n          <button onClick={this.predict}>predict</button>\n          <button onClick={this.test}>test</button>\n          {this.state.predictarray!=undefined ?  <h1>{this.state.predictarray}</h1> : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}