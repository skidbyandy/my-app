{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","state","imguploaded","picurl","undefined","tensor","model","predictarray","actmap","maskedImgArray","maskedImgArrayprogress","test","test2","test3","loadPic","bind","getTensor","loadModel","predict","activationMap","a","jsonUploads","document","getElementById","files","shardUploads","concatArray","Array","from","concat","console","log","tf","browserFiles","this","setState","summary","URL","createObjectURL","output","fromPixels","resizeBilinear","rgb","mul","expandDims","array","outputArray","inputs","input","outputs","getLayer","actMap","actMapResized","toPixels","squeeze","gather","cast","start","stop","keys","slice","divn","actmap3d","length","arraySync","i","maskedImg","div","push","error","buffer","set","toTensor","className","type","id","class","multiple","onClick","src","role","width","height","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.56d7fba4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {Component} from \"react\"\nimport logo from './logo.svg';\nimport {Image} from \"canvas\"\n//import './App.css';\nimport * as tf from '@tensorflow/tfjs';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button } from 'reactstrap';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state={\n      imguploaded: false,\n      picurl: undefined,\n      tensor: undefined,\n      model: undefined,\n      predictarray: undefined,\n      actmap: undefined,\n      maskedImgArray: undefined,\n      maskedImgArrayprogress: undefined,\n      test: undefined,\n      test2: undefined,\n      test3: undefined\n    }\n    this.loadPic=this.loadPic.bind(this)\n    this.getTensor=this.getTensor.bind(this)\n    this.loadModel=this.loadModel.bind(this)\n    this.predict=this.predict.bind(this)\n    this.activationMap=this.activationMap.bind(this)\n    this.maskedImgArray=this.maskedImgArray.bind(this)\n    this.test= this.test.bind(this)\n  }\n\n  async loadModel(){\n    let jsonUploads  = document.getElementById(\"jsonuploads\").files\n    let shardUploads = document.getElementById(\"sharduploads\").files\n    let concatArray = Array.from(jsonUploads).concat(Array.from(shardUploads));\n    console.log(concatArray)\n    const model = await tf.loadLayersModel(tf.io.browserFiles(concatArray));\n    this.setState({model: model})\n    console.log(model.summary())\n  }\n  loadPic(){\n    console.log(\"loading\")\n    this.setState({\n      picurl: URL.createObjectURL(document.getElementById(\"picuploads\").files[0])\n    })\n    console.log(this.state)\n    this.setState({imguploaded: true})\n  }\n\n  async getTensor(){\n    let output = tf.browser.fromPixels(document.getElementById(\"pic\")).resizeBilinear([64,64]);\n    const rgb = tf.tensor1d([0.2989, 0.587, 0.114])\n    output= tf.sum(output.mul(rgb), 2).expandDims(-1).expandDims(0)\n    this.setState({tensor: output})\n    let outputArray=await output.array()\n    console.log(outputArray[0])\n  }\n\n  async predict(){\n    let model=this.state.model\n    let predict=model.predict(this.state.tensor)\n    let predictarray=await predict.array()\n    this.setState({predictarray: predictarray})\n    console.log(predictarray)\n  }\n\n  async scorecam(){\n    let model=this.state.model\n    //let act_map_array = tf.model(inputs: model.input, outputs: model.getLayer(\"add_5\").output)\n  }\n\n  async activationMap(){\n    let model=this.state.model\n    let actMap= await tf.model({inputs: model.input, outputs: model.getLayer(\"add_5\").output}).predict(this.state.tensor)\n    let actMapResized= tf.image.resizeBilinear(actMap,[64,64])\n    this.setState({actmap: actMapResized})\n    tf.browser.toPixels(this.state.actmap.squeeze().gather([0], 2).squeeze().cast('int32'),document.getElementById(\"aCanvas\"))\n    //tf.browser.toPixels(tf.browser.toPixels(this.state.actmap.squeeze().gather([0], 2).squeeze().cast('int32').mul(this.state.tensor.squeeze().cast('int32')), document.getElementById(\"aCanvas\")))\n    //for i in this.range(this.state.actmap.array()[0][0][0].length){\n      //c\n      //array.aapend up result\n      //\n    //}\n    //\n  }\n  range(start, stop) {\n      if (typeof stop == 'undefined') {\n          stop = start;\n          start = 0;\n      }\n\n      let result = [...Array(stop).keys()].slice(start, stop);\n      return result;\n    }\n\nmaskedImgArray()\n  { //this.state.actmap.arraySync()[0][0][0].length\n    let model=this.state.model\n    try\n    {\n      const maskedImgArray=[]\n      const divn= tf.scalar(255)\n      const tensor=this.state.tensor.squeeze().cast('int32')\n      const actmap3d=this.state.actmap.squeeze()\n      const length=this.state.actmap.squeeze().arraySync()[0][0].length\n      for (let i = 0; i < length; i++)\n      {\n        this.setState({maskedImgArrayprogress: i})\n        let maskedImg= actmap3d.gather([i], 2).squeeze().cast('int32').mul(tensor).div(divn)\n        maskedImgArray.push(maskedImg)\n        this.setState({maskedImgArray: maskedImgArray})\n      }\n       //predMIA = softmax(model.predict(masked_input_array))\n    }\n    catch(error)\n    {\n      console.log(error)\n    }\n  }\n\n  test()\n  {\n    const model=this.state.model\n    const buffer=tf.buffer([1024,2])\n    for(let i=0; i<this.state.maskedImgArray.length; i++){\n      let predict=model.predict(this.state.maskedImgArray[i].expandDims(-1).expandDims(0))\n      buffer.set(predict.arraySync()[0], i, 0)\n      buffer.set(predict.arraySync()[1], i, 1)\n      console.log(i+\"/1024\")\n    }\n    let test=buffer.toTensor()\n    this.setState({test: test})\n  }\n\n  render(){\n    return (\n      <div className=\"dev\">\n        <div>\n\n\n          <div className=\"input-group\">\n            <input type=\"file\" className=\"form-control\" id=\"jsonuploads\" aria-describedby=\"inputGroupFileAddon04\" aria-label=\"Upload\" />\n          </div>\n          <br></br>\n          <div className=\"input-group\">\n            <input type=\"file\" class=\"form-control\" id=\"sharduploads\" multiple aria-describedby=\"inputGroupFileAddon04\" aria-label=\"Upload\" />\n            <button className=\"btn btn-outline-secondary\" onClick={this.loadModel} type=\"button\" id=\"inputGroupFileAddon04\">loadModel</button>\n          </div>\n          <br></br>\n          <div className=\"input-group\">\n            <input type=\"file\" class=\"form-control\" id=\"picuploads\" aria-describedby=\"inputGroupFileAddon04\" aria-label=\"Upload\" />\n            <button className=\"btn btn-outline-secondary\" onClick={this.loadPic} type=\"button\" id=\"inputGroupFileAddon04\">&nbsp;loadPic&nbsp;</button>\n          </div>\n          {\n            this.state.imguploaded ?\n            <div><br></br><img src={this.state.picurl} id=\"pic\"></img><br></br></div> :\n            null\n          }\n\n          <div class=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n            <button type=\"button\" class=\"btn btn-secondary btn-sm\" onClick={this.getTensor}>getTensor</button>\n            <button type=\"button\" class=\"btn btn-secondary btn-sm\" onClick={this.predict}>predict</button>\n            <button type=\"button\" class=\"btn btn-secondary btn-sm\" onClick={this.activationMap}>actMap</button>\n            <button type=\"button\" class=\"btn btn-secondary btn-sm\" onClick={this.maskedImgArray}>maskedImgArray</button>\n            <button type=\"button\" class=\"btn btn-secondary btn-sm\" onClick={this.test}>test</button>\n          </div>\n\n          {this.state.predictarray!==undefined ?  <h1>{this.state.predictarray}</h1> : null}\n          <canvas id=\"aCanvas\" width=\"200\" height=\"100\"></canvas>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}